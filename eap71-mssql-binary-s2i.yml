apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: eap71-mssql-binary-s2i
  xpaas: 1.4.14
message: A new EAP 7 based application has been created in your project.
metadata:
  annotations:
    description: An EAP 7 application from WAR, using MS SQLServer.
    iconClass: icon-eap
    openshift.io/display-name: JBoss EAP 7.1 Binary (MSSQL Server - no https)
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: eap,javaee,java,jboss
    template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/
    template.openshift.io/long-description: This template defines resources needed
      to develop Red Hat Enterprise Application Server 7.1 based application, including
      a build configuration, application deployment configuration and insecure communication
      using http.
    template.openshift.io/support-url: https://access.redhat.com
    version: 1.4.14
  name: eap71-mssql-binary-s2i
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The web server's http port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The JGroups ping port for clustering.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-ping
  spec:
    clusterIP: None
    ports:
    - name: ping
      port: 8888
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  id: ${APPLICATION_NAME}-http
  kind: Route
  metadata:
    annotations:
      description: Route for application's http service.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${HOSTNAME_HTTP}
    to:
      name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        - name: MAVEN_ARGS_APPEND
          value: ${MAVEN_ARGS_APPEND}
        - name: ARTIFACT_DIR
          value: ${ARTIFACT_DIR}
        - name: WAR_FILE_URL
          value: ${WAR_FILE_URL}
        - name: WAR_FILE_USER
          value: ${WAR_FILE_USER}
        - name: WAR_FILE_PASSWORD
          value: ${WAR_FILE_PASSWORD}
        - name: CUSTOM_INSTALL_DIRECTORIES
          value: '/install'
        forcePull: true
        from:
          kind: ImageStreamTag
          name: jboss-eap71-mssql-binary:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: JGROUPS_PING_PROTOCOL
            value: openshift.DNS_PING
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: ${APPLICATION_NAME}-ping
          - name: OPENSHIFT_DNS_PING_SERVICE_PORT
            value: "8888"
          - name: MQ_CLUSTER_PASSWORD
            value: ${MQ_CLUSTER_PASSWORD}
          - name: MQ_QUEUES
            value: ${MQ_QUEUES}
          - name: MQ_TOPICS
            value: ${MQ_TOPICS}
          - name: JGROUPS_CLUSTER_PASSWORD
            value: ${JGROUPS_CLUSTER_PASSWORD}
          - name: AUTO_DEPLOY_EXPLODED
            value: ${AUTO_DEPLOY_EXPLODED}
          - name: DATASOURCES
            value: "COOLSTORE"
          - name: COOLSTORE_USERNAME
            value: "sa"
          - name: COOLSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${SQLSERVER_SERVICE_NAME}
          - name: COOLSTORE_JNDI
            value: "java:jboss/datasources/CoolstoreDS"
          - name: COOLSTORE_DATABASE
            value: "${SQLSERVER_DATABASE_NAME}"
          - name: COOLSTORE_DRIVER
            value: "sqlserver"
          - name: COOLSTORE_SERVICE_HOST
            value: "${SQLSERVER_SERVICE_NAME}"
          - name: COOLSTORE_SERVICE_PORT
            value: '1433'
          - name: COOLSTORE_NONXA
            value: "true"
          - name: COOLSTORE_URL
            value: "jdbc:sqlserver://${SQLSERVER_SERVICE_NAME}\\\\${SQLSERVER_DATABASE_NAME}:1433"
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/livenessProbe.sh
            initialDelaySeconds: 60
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/readinessProbe.sh
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: coolstore
- description: The name assigned to the database service.
  displayName: Database Service Name
  name: SQLSERVER_SERVICE_NAME
  required: true
  value: sqlserver
- description: The name of the database to use within SQLServer.
  displayName: Database Name
  name: SQLSERVER_DATABASE_NAME
  required: true
  value: monolith
- description: The URL of WAR file to deploy
  displayName: WAR File url
  name: WAR_FILE_URL
  value: 'http://gitux01.openhybridcloud.io:8081/repository/coolstore-monolith/com/redhat/coolstore/monolith/1.1.0/monolith-1.1.0.war'
  required: true
- description: The user for retrieving WAR File
  displayName: WAR File user
  name: WAR_FILE_USER
- description: The password of user for retrieving WAR File
  displayName: WAR File password
  name: WAR_FILE_PASSWORD
- description: 'Custom hostname for http service route.  Leave blank for default hostname,
    e.g.: <application-name>-<project>.<default-domain-suffix>'
  displayName: Custom http Route Hostname
  name: HOSTNAME_HTTP
- description: Git source URI for application
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: false
  value: https://github.com/demo-redhat-forum-2018/jboss-eap-mssql-drivers
- description: Git branch/tag reference
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
  value: master
- description: Path within Git project to build; empty for root project directory.
  displayName: Context Directory
  name: CONTEXT_DIR
  value: ''
- description: Queue names
  displayName: Queues
  name: MQ_QUEUES
- description: Topic names
  displayName: Topics
  name: MQ_TOPICS
- description: A-MQ cluster admin password
  displayName: A-MQ cluster password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_CLUSTER_PASSWORD
  required: true
- description: GitHub trigger secret
  displayName: Github Webhook Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: Generic build trigger secret
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: JGroups cluster password
  displayName: JGroups Cluster Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: JGROUPS_CLUSTER_PASSWORD
  required: true
- description: Controls whether exploded deployment content should be automatically
    deployed
  displayName: Deploy Exploded Archives
  name: AUTO_DEPLOY_EXPLODED
  value: "false"
- description: Maven mirror to use for S2I builds
  displayName: Maven mirror URL
  name: MAVEN_MIRROR_URL
- description: Maven additional arguments to use for S2I builds
  displayName: Maven Additional Arguments
  name: MAVEN_ARGS_APPEND
  value: -Dcom.redhat.xpaas.repo.jbossorg
- description: List of directories from which archives will be copied into the deployment
    folder. If unspecified, all archives in /target will be copied.
  name: ARTIFACT_DIR
- description: Container memory limit
  name: MEMORY_LIMIT
  value: 1Gi
